// ----------------
// Адаптивная сетка
// ----------------
//
// Сетка, изменяющия положение блоков на различных устройствах.
// Ячейки могут быть одновременно панелями `.pnl`.
//
// Дизайн сеток осуществляется на основе парадигмы mobile-first:
// в начале определяется положение ячеек на мобильных устройствах,
// затем дописываются классы для устройств среднего размера, а лишь затем
// для больших экранов.
//
// ```
// .grid[.grid-gutters | .grid-rounded][.grid-level-1]
//   .cell[.pnl[...]][.cell-s-1of1][.cell-m-1][.cell-l-2]
//   [.cell]
// ```

.grid {
  display: flex;
  flex-flow: row wrap;
  overflow: hidden;
}

.grid-align-baseline { align-items: baseline }
.grid-align-center { align-items: center }

.grid-gutters {
  margin: -(gap / 2);

  &.block {
    margin-top: (gap / 2);
    margin-bottom: (gap / 2);
  }

  > .cell {
    margin: (gap / 2);
  }
}

.grid-rounded {
  border-radius: border-radius;
}

.grid-level-1 {
  box-shadow: 0 0 1px rgba(0,0,0,.5);
  z-index: 10;
}

.grid-level-2 {
  box-shadow: 0 0 3px rgba(0,0,0,.25);
  z-index: 20;
}

.grid-level-3 {
  box-shadow: 0 0 16px rgba(0,0,0,.25);
  z-index: 30;
}

// --------------
// Размеры ячейки
// --------------
//
// Классы вида `.cell-...-{n}` (пр. `.cell-...-2`) определяют относительный
// размер колонки. Фактический размер определяется исходя из количества колонок
// в строке. В следующем примере первая ячейка занимает треть экрана, а вторая —
// две трети.
//
// ```
// .grid
//   .cell.cell-1
//   .cell.cell-2
// ```
//
// Если добавить еще одну ячейку `.cell.cell-1`, то первая и последняя станут
// занимать четверть экрана каждая, а вторая -- половину.
//
// Классы вида `.cell-...-{i}of{j}` (пр. `.cell-...-1of2`) определяют размер
// колонки в процентах: `1of1` — это `1/1 = 100%`, `1of2` — это `1/2 = 50%` и т.д.
// Если колонки, задананные таким образом, не помещаются в одну строку, они
// переносятся на следующую строку. Это позволяет создавать сетки, в которых
// отображается по два элемента на мобильных телефонах, по три на планшетах
// и по четыре на больших экранах.

.cell {
  flex: 100%;
  box-sizing: border-box;
}

for i in (1..8) {

  .cell-{i} {
    flex: i;
  }

  for j in (1..i) {
    .cell-{j}of{i} {
      flex: (j * 100 / i)%;
    }
  }
}

// ------------
// Mobile first
// ------------
//
// При дизайне сеток сначала определите расположение колонок с помощью
// классов `.cell-{n}` или `.cell-{i}of{j}`. При отсутствии класса подразумевается
// `.cell-1of1` (т.е. 100%).
//
// Затем добавьте классы `.cell-m-{n}` или `.cell-m-{i}of{j}` для средних экранов.
//
// Затем добавьте классы `.cell-l-{n}` или `.cell-l-{i}of{j}` для больших экранов.

@media (min-width: screen-medium-min) {
  for i in (1..8) {

    .cell-m-{i} {
      flex: i;
    }

    for j in (1..i) {
      .cell-m-{j}of{i} {
        flex: (j * 100 / i)%;
      }
    }
  }
}

@media (min-width: screen-large-min) {
  for i in (1..8) {

    .cell-l-{i} {
      flex: i;
    }

    for j in (1..i) {
      .cell-l-{j}of{i} {
        flex: (j * 100 / i)%;
      }
    }
  }
}
